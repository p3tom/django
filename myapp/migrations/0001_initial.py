# Generated by Django 5.0.1 on 2024-01-25 10:13

import django.contrib.gis.db.models.fields
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="AQUnit",
            fields=[
                ("id", models.IntegerField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=100)),
                ("plant_id", models.IntegerField()),
                ("aq_unit_type_id", models.IntegerField()),
                (
                    "description",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "geo_xy",
                    django.contrib.gis.db.models.fields.PointField(
                        blank=True, null=True, srid=4326
                    ),
                ),
            ],
            options={
                "verbose_name": "aqs.aq_unit",
                "verbose_name_plural": "aqs.aq_units",
                "db_table": '"aqs"."aq_unit"',
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="AQUnitType",
            fields=[
                ("id", models.IntegerField(primary_key=True, serialize=False)),
                ("type", models.CharField(max_length=255)),
            ],
            options={
                "verbose_name": "aqs.aq_unit_type",
                "verbose_name_plural": "aqs.aq_unit_types",
                "db_table": "aq_unit_type",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Customer",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=100)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "Customer",
                "verbose_name_plural": "Customers",
                "db_table": "customer",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Event",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("description", models.CharField(max_length=255)),
            ],
            options={
                "verbose_name": "Event",
                "verbose_name_plural": "Events",
                "db_table": "event",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="LoggerConfig",
            fields=[
                (
                    "mqtt_topic_id",
                    models.IntegerField(primary_key=True, serialize=False),
                ),
                ("tag_name_id", models.IntegerField()),
                ("sensor_id", models.IntegerField()),
                ("log_interval_sec", models.IntegerField()),
                ("log_on_change", models.BooleanField(default=False)),
                ("logger_id", models.IntegerField()),
            ],
            options={
                "verbose_name": "Logger Configuration",
                "verbose_name_plural": "Logger Configurations",
                "db_table": '"aqs"."logger_config"',
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="LoggerInstance",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.TextField()),
            ],
            options={
                "verbose_name": "Logger Instance",
                "verbose_name_plural": "Logger Instances",
                "db_table": "logger_instance",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Measurement",
            fields=[
                ("ts", models.DateTimeField(auto_now_add=True)),
                ("value", models.FloatField(null=True)),
                (
                    "measurement_pt_id",
                    models.IntegerField(primary_key=True, serialize=False),
                ),
                ("tag_id", models.IntegerField()),
                ("sensor_id", models.IntegerField()),
                ("offset_applied", models.FloatField(default=0.0)),
                ("scale_applied", models.FloatField(default=1.0)),
            ],
            options={
                "verbose_name": "measurement",
                "verbose_name_plural": "measurements",
                "db_table": '"aqs"."measurement"',
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="MeasurementPoint",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=100)),
                ("mp_type_id", models.IntegerField()),
                (
                    "description",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("aq_unit_id", models.IntegerField()),
                (
                    "geo_xy",
                    django.contrib.gis.db.models.fields.PointField(
                        blank=True, null=True, srid=4326
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "Measurement Point",
                "verbose_name_plural": "Measurement Points",
                "db_table": "measurement_pt",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="MeasurementPointEvent",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("ts", models.DateTimeField(default=django.utils.timezone.now)),
                ("text", models.CharField(blank=True, max_length=255, null=True)),
                ("measurement_pt_id", models.IntegerField()),
            ],
            options={
                "verbose_name": "Measurement Point Event",
                "verbose_name_plural": "Measurement Point Events",
                "db_table": "measurement_pt_event",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="MeasurementPointHistory",
            fields=[
                (
                    "event_date",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("old_sensor_id", models.IntegerField(blank=True, null=True)),
                ("measurement_pt_id", models.IntegerField()),
            ],
            options={
                "verbose_name": "Measurement Point History",
                "verbose_name_plural": "Measurement Point Histories",
                "db_table": "measurement_pt_history",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="MeasurementPointSensor",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("measurement_pt_id", models.IntegerField()),
                ("sensor_id", models.IntegerField()),
            ],
            options={
                "verbose_name": "Measurement Point Sensor",
                "verbose_name_plural": "Measurement Point Sensors",
                "db_table": "measurement_pt_sensor",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="MeasurementPointType",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("description", models.CharField(max_length=100)),
            ],
            options={
                "verbose_name": "Measurement Point Type",
                "verbose_name_plural": "Measurement Point Types",
                "db_table": '"aqs"."measurement_pt_type"',
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="MqttTopic",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("topic", models.CharField(max_length=255, unique=True)),
                (
                    "description",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "MQTT Topic",
                "verbose_name_plural": "MQTT Topics",
                "db_table": "mqtt_topic",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="OEMManufacturer",
            fields=[
                ("id", models.IntegerField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=100)),
            ],
            options={
                "verbose_name": "OEM Manufacturer",
                "verbose_name_plural": "OEM Manufacturers",
                "db_table": "oem_manufacturer",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Plant",
            fields=[
                ("id", models.IntegerField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=100)),
                ("site_id", models.IntegerField()),
                (
                    "geo_xy",
                    django.contrib.gis.db.models.fields.PointField(
                        blank=True, null=True, srid=4326
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "Plant",
                "verbose_name_plural": "Plants",
                "db_table": "plant",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Sensor",
            fields=[
                ("id", models.IntegerField(primary_key=True, serialize=False)),
                ("serialno", models.CharField(max_length=100)),
                ("sensor_type_id", models.IntegerField()),
                ("aqs_system_serialno", models.CharField(max_length=15)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "Sensor",
                "verbose_name_plural": "Sensors",
                "db_table": "sensor",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="SensorHistory",
            fields=[
                ("ts", models.DateTimeField(primary_key=True, serialize=False)),
                ("event_id", models.IntegerField()),
                (
                    "description",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("sensor_id", models.IntegerField()),
            ],
            options={
                "verbose_name": "Sensor History",
                "verbose_name_plural": "Sensor Histories",
                "db_table": "sensor_history",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="SensorType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("description", models.CharField(max_length=100)),
                ("part_no", models.CharField(max_length=50)),
                ("part_no_oem", models.CharField(blank=True, max_length=50, null=True)),
                ("oem_mfr_id", models.IntegerField()),
            ],
            options={
                "verbose_name": "Sensor Type",
                "verbose_name_plural": "Sensor Types",
                "db_table": "sensor_type",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="SensorVerification",
            fields=[
                ("ts", models.DateTimeField(primary_key=True, serialize=False)),
                ("offset", models.FloatField(blank=True, null=True)),
                ("factor", models.FloatField(blank=True, null=True)),
                ("tag_id", models.IntegerField(blank=True, null=True)),
                ("sensor_id", models.IntegerField()),
            ],
            options={
                "verbose_name": "Sensor Verification",
                "verbose_name_plural": "Sensor Verifications",
                "db_table": "sensor_verification",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Site",
            fields=[
                ("id", models.IntegerField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=100)),
                (
                    "addr_street",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "addr_postcode",
                    models.CharField(blank=True, max_length=10, null=True),
                ),
                ("addr_city", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "geo_xy",
                    django.contrib.gis.db.models.fields.PointField(
                        blank=True, null=True, srid=4326
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("site_operator_id", models.IntegerField()),
                ("site_owner_id", models.IntegerField()),
                ("owner_parent_id", models.IntegerField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Site",
                "verbose_name_plural": "Sites",
                "db_table": '"aqs"."site"',
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="SiteContact",
            fields=[
                ("id", models.IntegerField(primary_key=True, serialize=False)),
                ("firstname", models.CharField(blank=True, max_length=255, null=True)),
                ("lastname", models.CharField(max_length=255)),
                ("e_mail", models.EmailField(max_length=254)),
                (
                    "mobile_phone",
                    models.CharField(blank=True, max_length=20, null=True),
                ),
                ("work_phone", models.CharField(blank=True, max_length=20, null=True)),
                ("comment", models.CharField(blank=True, max_length=255, null=True)),
                ("active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "Site Contact",
                "verbose_name_plural": "Site Contacts",
                "db_table": "site_contact",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="TagName",
            fields=[
                ("id", models.IntegerField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=255)),
                (
                    "description",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("unit", models.CharField(max_length=255)),
                ("unit_long", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "unit_description",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("tag_type_id", models.IntegerField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "Tag Name",
                "verbose_name_plural": "Tag Names",
                "db_table": "tag_name",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="TagType",
            fields=[
                ("id", models.IntegerField(primary_key=True, serialize=False)),
                ("type", models.CharField(max_length=255)),
            ],
            options={
                "verbose_name": "Tag Type",
                "verbose_name_plural": "Tag Types",
                "db_table": "tag_type",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="VersionInfo",
            fields=[
                ("id", models.IntegerField(primary_key=True, serialize=False)),
                ("schema_version", models.TextField(default="0.7")),
                (
                    "schema_updated",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
            ],
            options={
                "verbose_name": "Version Information",
                "verbose_name_plural": "Version Information",
                "db_table": "version_info",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="AqsModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("model", models.CharField(max_length=20, unique=True)),
                (
                    "description",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
            ],
            options={
                "verbose_name": "Aqs Model",
                "verbose_name_plural": "Aqs Models",
                "db_table": "aqs_model",
            },
        ),
        migrations.CreateModel(
            name="AqsSystem",
            fields=[
                (
                    "serialno",
                    models.CharField(max_length=15, primary_key=True, serialize=False),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "model",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="myapp.aqsmodel"
                    ),
                ),
            ],
            options={
                "verbose_name": "Aqs System",
                "verbose_name_plural": "Aqs Systems",
                "db_table": "aqs_system",
            },
        ),
    ]
